pipeline {
    agent any
    
    environment {
        // AWS Configuration
        AWS_REGION = 'ap-south-1'
        EKS_CLUSTER_NAME = 'my-eks-cluster'
        
        // Application Configuration
        APP_NAME = 'sample-web-app'
        NAMESPACE = 'sample-apps'
        
        // Docker Registry (adjust as needed)
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        IMAGE_NAME = "${APP_NAME}"
        IMAGE_TAG = "${BUILD_NUMBER}"
        
        // Credentials
        AWS_CREDENTIALS = credentials('aws-credentials')
        KUBECONFIG_CREDENTIAL = credentials('kubeconfig-file')
    }
    // Test
    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'githubtoken', url: 'https://github.com/Venkateshd279/eks-cluster-terraform.git']])
            }
        }
        
        stage('Environment Setup') {
            steps {
                script {
                    echo "üîß Setting up environment..."
                    
                    // Install or update kubectl
                    sh '''
                        # Check if kubectl exists, if not install it
                        if ! command -v kubectl &> /dev/null; then
                            echo "Installing kubectl..."
                            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                            chmod +x kubectl
                            sudo mv kubectl /usr/local/bin/
                        fi
                        
                        # Verify kubectl
                        kubectl version --client
                    '''
                    
                    // Configure AWS CLI
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh '''
                            aws configure set region $AWS_REGION
                            aws sts get-caller-identity
                        '''
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            when {
                // Only build image if Dockerfile exists
                expression { fileExists('k8s-apps/sample-web-app/Dockerfile') }
            }
            steps {
                script {
                    echo "üê≥ Building Docker image..."
                    
                    dir('k8s-apps/sample-web-app') {
                        // Build Docker image
                        sh """
                            docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                            docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }
        
        stage('Push to ECR') {
            when {
                expression { fileExists('k8s-apps/sample-web-app/Dockerfile') }
            }
            steps {
                script {
                    echo "üì§ Pushing image to ECR..."
                    
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            # Login to ECR
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                            
                            # Create repository if it doesn't exist
                            aws ecr describe-repositories --repository-names ${IMAGE_NAME} --region ${AWS_REGION} || \
                            aws ecr create-repository --repository-name ${IMAGE_NAME} --region ${AWS_REGION}
                            
                            # Tag and push image
                            docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                            docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${ECR_REGISTRY}/${IMAGE_NAME}:latest
                            
                            docker push ${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                            docker push ${ECR_REGISTRY}/${IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }
        
        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    echo "üìù Updating Kubernetes manifests..."
                    
                    // Update image tag in deployment.yaml if using custom image
                    if (fileExists('k8s-apps/sample-web-app/Dockerfile')) {
                        sh """
                            # Update image in deployment.yaml
                            sed -i 's|image: nginx:alpine|image: ${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}|g' k8s-apps/sample-web-app/deployment.yaml
                        """
                    }
                    
                    // Add build info to ConfigMap
                    sh """
                        # Update ConfigMap with build information
                        sed -i 's|<span id="timestamp">.*</span>|<span id="timestamp">'${BUILD_TIMESTAMP}'</span>|g' k8s-apps/sample-web-app/configmap.yaml
                        sed -i 's|Build: .*|Build: #${BUILD_NUMBER}|g' k8s-apps/sample-web-app/configmap.yaml
                    """
                }
            }
        }
        
        stage('Configure EKS Access') {
            steps {
                script {
                    echo "‚ò∏Ô∏è Configuring EKS cluster access..."
                    
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            # Configure kubectl for EKS cluster
                            aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}
                            
                            # Verify cluster connection
                            kubectl cluster-info
                            kubectl get nodes
                        """
                    }
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                script {
                    echo "üöÄ Deploying to EKS cluster..."
                    
                    dir('k8s-apps/sample-web-app') {
                        sh """
                            # Apply Kubernetes manifests
                            kubectl apply -f namespace.yaml
                            kubectl apply -f configmap.yaml
                            kubectl apply -f deployment.yaml
                            kubectl apply -f service.yaml
                            
                            # Apply ingress if AWS Load Balancer Controller is available
                            if kubectl get crd ingressclasses.networking.k8s.io &> /dev/null; then
                                kubectl apply -f ingress.yaml
                            else
                                echo "‚ö†Ô∏è  AWS Load Balancer Controller not found, skipping ingress creation"
                            fi
                        """
                    }
                }
            }
        }
        
        stage('Wait for Deployment') {
            steps {
                script {
                    echo "‚è≥ Waiting for deployment to be ready..."
                    
                    sh """
                        # Wait for deployment to be ready
                        kubectl wait --for=condition=available --timeout=300s deployment/${APP_NAME} -n ${NAMESPACE}
                        
                        # Check pod status
                        kubectl get pods -n ${NAMESPACE} -l app=${APP_NAME}
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    echo "‚úÖ Verifying deployment..."
                    
                    sh """
                        # Get deployment status
                        echo "=== Deployment Status ==="
                        kubectl get deployment ${APP_NAME} -n ${NAMESPACE}
                        
                        echo "=== Pods ==="
                        kubectl get pods -n ${NAMESPACE} -l app=${APP_NAME} -o wide
                        
                        echo "=== Service ==="
                        kubectl get service ${APP_NAME}-service -n ${NAMESPACE}
                        
                        echo "=== Ingress ==="
                        kubectl get ingress -n ${NAMESPACE} || echo "No ingress found"
                        
                        # Test service endpoint
                        kubectl run test-pod --image=curlimages/curl:latest --rm -i --restart=Never -n ${NAMESPACE} -- \
                        curl -s http://${APP_NAME}-service.${NAMESPACE}.svc.cluster.local || echo "Service test failed"
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üßπ Cleaning up..."
                
                // Clean up Docker images
                sh """
                    docker rmi ${IMAGE_NAME}:${IMAGE_TAG} || true
                    docker rmi ${IMAGE_NAME}:latest || true
                    docker system prune -f || true
                """
            }
        }
        
        success {
            script {
                echo "üéâ Deployment completed successfully!"
                
                // Get application URL if available
                sh """
                    echo "=== Application URLs ==="
                    
                    # Try to get ingress URL
                    INGRESS_URL=\$(kubectl get ingress -n ${NAMESPACE} -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
                    
                    if [ ! -z "\$INGRESS_URL" ]; then
                        echo "üåç Application URL: http://\$INGRESS_URL"
                    else
                        echo "‚è≥ Load Balancer URL not ready yet"
                        echo "Check later with: kubectl get ingress -n ${NAMESPACE}"
                    fi
                    
                    # Service URL (internal)
                    echo "üîó Internal Service: http://${APP_NAME}-service.${NAMESPACE}.svc.cluster.local"
                """
            }
        }
        
        failure {
            script {
                echo "‚ùå Deployment failed!"
                
                // Get debugging information
                sh """
                    echo "=== Debugging Information ==="
                    kubectl get pods -n ${NAMESPACE} -l app=${APP_NAME}
                    kubectl describe deployment ${APP_NAME} -n ${NAMESPACE}
                    kubectl logs -l app=${APP_NAME} -n ${NAMESPACE} --tail=50 || echo "No logs available"
                """
            }
        }
    }
}

pipeline {
    agent any
    
    environment {
        // AWS Configuration
        AWS_REGION = 'ap-south-1'
        EKS_CLUSTER_NAME = 'my-eks-cluster'
        
        // Application Configuration
        APP_NAME = 'sample-web-app'
        NAMESPACE = 'sample-apps'
        
        // Docker/ECR Configuration
        AWS_ACCOUNT_ID = '897722681721'
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        IMAGE_REPO = "${ECR_REGISTRY}/${APP_NAME}"
        IMAGE_TAG = "${BUILD_NUMBER}"
        
        // Kubernetes manifests path
        K8S_MANIFESTS_PATH = 'k8s-apps/sample-web-app'
        
        // SNS Notification Configuration
        SNS_TOPIC_ARN = 'arn:aws:sns:ap-south-1:897722681721:jenkins-pipeline-notifications'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Checking out source code...'
                // Code is automatically checked out by Jenkins
                script {
                    // Get git commit info for tagging
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                    env.IMAGE_TAG = "${BUILD_NUMBER}-${GIT_COMMIT_SHORT}"
                }
                echo "üìã Build Number: ${BUILD_NUMBER}"
                echo "üìã Git Commit: ${GIT_COMMIT_SHORT}"
                echo "üìã Image Tag: ${IMAGE_TAG}"
            }
        }
        
        stage('Environment Setup') {
            steps {
                echo '‚öôÔ∏è Setting up environment...'
                script {
                    sh '''
                        echo "Checking tools..."
                        aws --version
                        kubectl version --client
                        docker --version
                        
                        echo "Configuring AWS CLI..."
                        aws configure set region $AWS_REGION
                        aws configure set output json
                        
                        echo "Current AWS Identity:"
                        aws sts get-caller-identity
                    '''
                }
            }
        }
        
        stage('Create ECR Repository') {
            steps {
                echo 'üì¶ Creating ECR repository if it doesn\'t exist...'
                script {
                    sh '''
                        echo "Checking if ECR repository exists..."
                        
                        # Check if repository exists, create if not
                        if aws ecr describe-repositories --repository-names $APP_NAME --region $AWS_REGION >/dev/null 2>&1; then
                            echo "‚úÖ ECR repository '$APP_NAME' already exists"
                        else
                            echo "üì¶ Creating ECR repository '$APP_NAME'..."
                            aws ecr create-repository --repository-name $APP_NAME --region $AWS_REGION
                            echo "‚úÖ ECR repository created successfully"
                        fi
                        
                        echo "üìã ECR Repository URI: $IMAGE_REPO"
                        
                        # Set lifecycle policy to manage image retention
                        aws ecr put-lifecycle-policy --repository-name $APP_NAME --region $AWS_REGION --lifecycle-policy-text '{
                            "rules": [
                                {
                                    "rulePriority": 1,
                                    "description": "Keep last 10 images",
                                    "selection": {
                                        "tagStatus": "tagged",
                                        "countType": "imageCountMoreThan",
                                        "countNumber": 10
                                    },
                                    "action": {
                                        "type": "expire"
                                    }
                                }
                            ]
                        }' || echo "‚ö†Ô∏è Lifecycle policy already exists or failed to set"
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                script {
                    dir(K8S_MANIFESTS_PATH) {
                        sh '''
                            echo "Building Docker image..."
                            docker build -t $APP_NAME:$IMAGE_TAG .
                            docker tag $APP_NAME:$IMAGE_TAG $IMAGE_REPO:$IMAGE_TAG
                            docker tag $APP_NAME:$IMAGE_TAG $IMAGE_REPO:latest
                            
                            echo "Docker images built:"
                            docker images | grep $APP_NAME
                        '''
                    }
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                echo '‚¨ÜÔ∏è Pushing image to ECR...'
                script {
                    sh '''
                        echo "Logging in to ECR..."
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
                        
                        if [ $? -eq 0 ]; then
                            echo "‚úÖ ECR login successful"
                        else
                            echo "‚ùå ECR login failed"
                            exit 1
                        fi
                        
                        echo "Pushing Docker image to ECR..."
                        docker push $IMAGE_REPO:$IMAGE_TAG
                        docker push $IMAGE_REPO:latest
                        
                        echo "‚úÖ Image pushed successfully!"
                        echo "üìã Image URI: $IMAGE_REPO:$IMAGE_TAG"
                        echo "üìã Latest URI: $IMAGE_REPO:latest"
                        
                        # Verify image exists in ECR
                        aws ecr describe-images --repository-name $APP_NAME --region $AWS_REGION --image-ids imageTag=$IMAGE_TAG
                    '''
                }
            }
        }
        
        stage('Update Kubernetes Manifests') {
            steps {
                echo 'üìù Updating Kubernetes manifests...'
                script {
                    dir(K8S_MANIFESTS_PATH) {
                        sh '''
                            # Update deployment-ecr.yaml with new image
                            echo "Current image in deployment-ecr.yaml:"
                            grep "image:" deployment-ecr.yaml
                            
                            # Update with the new image tag
                            sed -i "s|image: .*ecr.*amazonaws.com/sample-web-app:.*|image: $IMAGE_REPO:$IMAGE_TAG|g" deployment-ecr.yaml
                            
                            echo "Updated deployment-ecr.yaml:"
                            grep "image:" deployment-ecr.yaml
                            
                            # Verify the change was applied
                            if grep -q "$IMAGE_REPO:$IMAGE_TAG" deployment-ecr.yaml; then
                                echo "‚úÖ Image successfully updated in deployment-ecr.yaml"
                            else
                                echo "‚ùå Failed to update image in deployment-ecr.yaml"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Configure EKS Access') {
            steps {
                echo 'üîê Configuring EKS access...'
                script {
                    sh '''
                        echo "Updating kubeconfig for EKS cluster..."
                        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
                        
                        echo "Verifying kubectl access..."
                        kubectl cluster-info
                        kubectl get nodes
                    '''
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                echo 'üöÄ Deploying to EKS cluster...'
                script {
                    dir(K8S_MANIFESTS_PATH) {
                        sh '''
                            echo "Applying Kubernetes manifests..."
                            
                            # Apply manifests in order
                            kubectl apply -f namespace.yaml
                            kubectl apply -f configmap.yaml
                            kubectl apply -f deployment-ecr.yaml
                            kubectl apply -f service.yaml
                            kubectl apply -f ingress.yaml
                            
                            echo "Deployment completed!"
                        '''
                    }
                }
            }
        }
        
        stage('Wait for Deployment') {
            steps {
                echo '‚è≥ Waiting for deployment to be ready...'
                script {
                    sh '''
                        echo "Waiting for deployment rollout..."
                        kubectl rollout status deployment/$APP_NAME -n $NAMESPACE --timeout=300s
                        
                        echo "Checking pod status..."
                        kubectl get pods -n $NAMESPACE -l app=$APP_NAME
                    '''
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                echo '‚úÖ Verifying deployment...'
                script {
                    sh '''
                        echo "Getting deployment information..."
                        kubectl get all -n $NAMESPACE -l app=$APP_NAME
                        
                        echo "Checking service endpoints..."
                        kubectl get svc -n $NAMESPACE
                        
                        echo "Checking ingress..."
                        kubectl get ingress -n $NAMESPACE
                        
                        # Get LoadBalancer URL if available
                        LB_URL=$(kubectl get ingress -n $NAMESPACE -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "LoadBalancer not ready yet")
                        echo "Application URL: http://$LB_URL"
                    '''
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                echo 'üßπ Cleaning up local Docker images...'
                script {
                    sh '''
                        echo "Removing local Docker images..."
                        docker rmi $APP_NAME:$IMAGE_TAG || true
                        docker rmi $IMAGE_REPO:$IMAGE_TAG || true
                        docker rmi $IMAGE_REPO:latest || true
                        
                        echo "Cleanup completed!"
                    '''
                }
            }
        }
        
        stage('Test Notification') {
            when {
                environment name: 'TEST_FAILURE', value: 'true'
            }
            steps {
                echo 'üß™ Testing failure notification...'
                script {
                    sh '''
                        echo "This stage will intentionally fail to test SNS notifications"
                        echo "You should receive an email notification after this failure"
                        exit 1
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'üìä Pipeline execution completed!'
            script {
                sh '''
                    echo "==================================="
                    echo "Pipeline Summary"
                    echo "==================================="
                    echo "Application: $APP_NAME"
                    echo "Namespace: $NAMESPACE"
                    echo "Image: $IMAGE_REPO:$IMAGE_TAG"
                    echo "Build: $BUILD_NUMBER"
                    echo "Git Commit: $GIT_COMMIT_SHORT"
                    echo "==================================="
                '''
            }
        }
        success {
            echo '‚úÖ Pipeline executed successfully!'
            script {
                sh '''
                    echo "üéâ Deployment successful!"
                    echo "Check your application at:"
                    kubectl get ingress -n $NAMESPACE
                '''
            }
            
            // Send SNS notification on success (optional - uncomment if needed)
            script {
                def successMessage = """
‚úÖ JENKINS PIPELINE SUCCEEDED ‚úÖ

Job: ${env.JOB_NAME}
Build: #${env.BUILD_NUMBER}
Git Commit: ${env.GIT_COMMIT_SHORT}
Duration: ${currentBuild.durationString}

Application: ${env.APP_NAME}
Namespace: ${env.NAMESPACE}
Image: ${env.IMAGE_REPO}:${env.IMAGE_TAG}

Build URL: ${env.BUILD_URL}

üöÄ Deployment completed successfully!
Your application is now running with the latest changes.

Time: ${new Date().toString()}
                """.trim()
                
                // Uncomment the lines below if you want success notifications
                /*
                try {
                    sh """
                        aws sns publish \\
                            --topic-arn ${env.SNS_TOPIC_ARN} \\
                            --subject "‚úÖ Jenkins Pipeline Succeeded: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}" \\
                            --message '${successMessage}' \\
                            --region ${env.AWS_REGION}
                    """
                    echo "‚úÖ Success notification sent via SNS"
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Failed to send success notification: ${e.getMessage()}"
                }
                */
            }
        }
        failure {
            echo '‚ùå Pipeline failed!'
            script {
                sh '''
                    echo "Pipeline failed. Checking logs..."
                    kubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' | tail -10
                '''
            }
            
            // Send SNS notification on failure
            script {
                def failureMessage = """
üî¥ JENKINS PIPELINE FAILED üî¥

Job: ${env.JOB_NAME}
Build: #${env.BUILD_NUMBER}
Git Commit: ${env.GIT_COMMIT_SHORT}
Duration: ${currentBuild.durationString}
Status: ${currentBuild.result}

Application: ${env.APP_NAME}
Namespace: ${env.NAMESPACE}
Image: ${env.IMAGE_REPO}:${env.IMAGE_TAG}

Build URL: ${env.BUILD_URL}

Recent Events:
$(kubectl get events -n ${env.NAMESPACE} --sort-by='.lastTimestamp' --no-headers | tail -5 | awk '{print $6 " " $7 " " $8 " " $9 " " $10}' || echo "No recent events")

Time: ${new Date().toString()}

This is an automated notification from Jenkins CI/CD Pipeline.
                """.trim()
                
                try {
                    sh """
                        aws sns publish \\
                            --topic-arn ${env.SNS_TOPIC_ARN} \\
                            --subject "‚ùå Jenkins Pipeline Failed: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}" \\
                            --message '${failureMessage}' \\
                            --region ${env.AWS_REGION}
                    """
                    echo "‚úÖ SNS notification sent successfully"
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Failed to send SNS notification: ${e.getMessage()}"
                    // Fallback: log the failure message for debugging
                    echo "Notification content: ${failureMessage}"
                }
            }
        }
    }
}